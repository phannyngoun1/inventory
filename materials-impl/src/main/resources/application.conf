play.application.loader =  com.dream.materials.impl.MaterialApplicationLoader

# Cassandra write-side configuration.
inventory.cassandra.keyspace = material

cassandra-journal.keyspace = ${inventory.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${inventory.cassandra.keyspace}

# Enable the serializer provided in Akka 2.5.8+ for akka.Done and other internal
# messages to avoid the use of Java serialization.
akka.actor.serialization-bindings {
  "akka.Done"                 = akka-misc
  "akka.actor.Address"        = akka-misc
  "akka.remote.UniqueAddress" = akka-misc
}



# Defaults to use for each Akka persistence plugin
jdbc-defaults.slick {

  # The Slick profile to use
  # set to one of: slick.jdbc.PostgresProfile$, slick.jdbc.MySQLProfile$, slick.jdbc.OracleProfile$ or slick.jdbc.H2Profile$
  profile = "slick.jdbc.MySQLProfile$"

  # The JNDI name for the Slick pre-configured DB
  # By default, this value will be used by all akka-persistence-jdbc plugin components (journal, read-journal and snapshot).
  # you may configure each plugin component to use different DB settings
  jndiDbName=DefaultDB
}

# JDBC read-side configuration.
db.default {

  driver = "com.mysql.jdbc.Driver"
  url = "jdbc:mysql://localhost:3306/inventory?useSSL=false"
  connectionTestQuery = "SELECT 1"
  #poolName = "slick-pool"
  queueSize = 4
  username = "test"
  password = "123456"

  # The JNDI name for this DataSource
  # Play, and therefore Lagom, will automatically register this DataSource as a JNDI resource using this name.
  # This DataSource will be used to build a pre-configured Slick DB
  jndiName=DefaultDS

  # Lagom will configure a Slick Database, using the async-executor settings below
  # and register it as a JNDI resource using this name.
  # By default, all akka-persistence-jdbc plugin components will use this JDNI name
  # to lookup for this pre-configured Slick DB
  jndiDbName=DefaultDB

  async-executor {
    # number of objects that can be queued by the async executor
    queueSize = 10000

    # 5 * number of cores
    numThreads = 20

    # same as number of threads
    minConnections = 20

    # same as number of threads
    maxConnections = 20

    # if true, a Mbean for AsyncExecutor will be registered
    registerMbeans = false
    # Hikari is the default connection pool and it's fine-tuned to use the same
    # values for minimum and maximum connections as defined for the async-executor above
    hikaricp {
      minimumIdle = ${db.default.async-executor.minConnections}
      maximumPoolSize = ${db.default.async-executor.maxConnections}
    }

    # Alternatively, BoneCP can be used instead of Hikari.
    # More information on how to switch to BoneCP can be found here:
    # https://www.playframework.com/documentation/2.6.x/ScalaDatabase#Selecting-and-configuring-the-connection-pool
    #
    # The settings below configured it to use the same
    # values for minimum and maximum connections as defined for the async-executor above
    bonecp {
      # the pool partition count
      partitionCount = 1

      # the value below is dependent on the partitionCount
      # it must be equal or less than async-executor.minConnections / partitionCount
      minConnectionsPerPartition = ${db.default.async-executor.minConnections}

      # the value below is dependent on the partitionCount
      # it must be equal or less than async-executor.maxConnections / partitionCount
      maxConnectionsPerPartition = ${db.default.async-executor.maxConnections}
    }
  }
}

# Finally, ensure that Cassandra is used for the journal and snapshot-store
# Lagom's Cassandra and JDBC persistence modules both define these properties,
# so the order they are applied is non-deterministic.
akka.persistence {
  journal {
    plugin = cassandra-journal
  }

  snapshot-store {
    plugin = cassandra-snapshot-store
  }
}
